#include "unionfind_parallel.cpp"
vector<long int> createNewMessagePathCompression(int processDone,long int queryNum,int processRank, long int originalQueryX, long int originalQueryY, long int newQueryX, long int newQueryY, long int isReply,long int finalParent)
{
    vector<long int> message;
    message.clear();
    message.push_back((long int)processDone);   // if process is done or not
    message.push_back(queryNum);                // queryNum for query (generated by original process to which query came from process 0)
    message.push_back((long int)processRank);   // orignal process which forwarded the query : not needed
    message.push_back(originalQueryX);          // used in reply message too
    message.push_back(originalQueryY);          // used in reply message too
    message.push_back(newQueryX);               
    message.push_back(newQueryY);
    message.push_back(isReply);                 // query number of the query for which reply has come(if it is a forwarded query then this will be -1)
    message.push_back(finalParent);             // used in path compression (reply message will contain this field)
    // message.push_back(queryOriginatingProcessNum);
    // prvs query Y  is also needed
    // old query Y is original query Y
    message.resize(9);
    return message;
}

// CHECK THIS SELF MESSAGES CAN BE SENT ****

void processQueriesPathCompression(int processRank,vector<long int> queriesProcessX,vector<long int> queriesProcessY,vector<long int>* unionfindDs,vector<int> pointIdMapping,long int numPointsPerProcess,int num_processes)
{
    map<int, int>* processQueryNumMappingSend = new map<int,int>; // mapping from process number to tag // do something for this
    map<vector<long int>, vector<long int> >* replyRequired = new map<vector<long int>, vector<long int> >; // mapping from (query number,originalQueryX,originalQueryY) to (queryX,queryY with which this process started)
    map<vector<long int>, int>* replyToBeSent = new map<vector<long int>, int>; // mapping from (query number,originalQueryX, originalQueryY) to processNum to which to send reply
    long int* queryNum = (long int*)malloc(sizeof(long int));                   // used when a query is forwarded
    *queryNum = 0;
    vector<bool>* finished = new vector<bool>(num_processes);
    MPI_Request request; // check this
    MPI_Status status;
    int flag;
    long int numQueries = queriesProcessX.size();
    long int i;
    long int x,y;
    long int startIndex = (processRank - 1) * numPointsPerProcess;
    
    for(int j = 1; j < num_processes; j++)
    {
        // if(j == processRank)
        // {
        //     continue;
        // }
        (*processQueryNumMappingSend)[j] = 0;
    }
    for(int j = 1; j < num_processes; j++)
    {
        (*finished)[j-1] = false;
    }

    for(i = 0; i < numQueries; i++)
    {
        x = queriesProcessX[i];
        y = queriesProcessY[i];
        returnStruct* retVal = unifyPathCompression(x,y,unionfindDs,pointIdMapping,startIndex,processRank);
        if(retVal->query->finalParent != -1)
        {
            printf("Union of %ld and %ld done by process %d\n",x,y,processRank);
            continue;
        }

        long int queryNumSend;
        
        queryNumSend = *queryNum; // reply required
        vector<long int> queryforWhichReplyRequired;
        queryforWhichReplyRequired.push_back(queryNumSend);
        queryforWhichReplyRequired.push_back(x);
        queryforWhichReplyRequired.push_back(y);

        vector<long int> queryWithWhichProcessStarted;
        queryWithWhichProcessStarted.push_back(x);
        queryWithWhichProcessStarted.push_back(y);
        (*replyRequired)[queryforWhichReplyRequired] = queryWithWhichProcessStarted;
        (*queryNum)++;

        vector<long int> queryForward = createNewMessagePathCompression(0,queryNumSend,processRank,x,y,retVal->query->newQueryX,retVal->query->newQueryY,-1,-1);
        sendMessage(queryForward,retVal->query->toProcess,processQueryNumMappingSend);
        printf("Sent query union(%ld,%ld)=>union(%ld,%ld) to process %d with tag %d\n",x,y,retVal->query->newQueryX,retVal->query->newQueryY,retVal->query->toProcess,(*processQueryNumMappingSend)[retVal->query->toProcess] - 1);

        MPI_Iprobe(MPI_ANY_SOURCE,MPI_ANY_TAG,MPI_COMM_WORLD,&flag,&status);
        if(flag)
        {
            flag = false;
            int src = status.MPI_SOURCE;
            int tag = status.MPI_TAG;
            vector<long int> queryRecv;
            queryRecv.resize(9);
            MPI_Recv(&queryRecv[0],9,MPI_LONG,src,tag,MPI_COMM_WORLD,&status);
            processReceivedQueryPathCompression(queryRecv,finished,replyRequired,replyToBeSent,unionfindDs,pointIdMapping,startIndex,processRank,processQueryNumMappingSend,queryNum,status);
        }
    }
    if((*replyRequired).size() > 0)
    {
        while((*replyRequired).size() > 0)
        {
            MPI_Iprobe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &flag, &status);
            if(flag)
            {
                flag = false;
                int src = status.MPI_SOURCE;
                int tag = status.MPI_TAG;
                vector<long int> queryRecv;
                queryRecv.resize(9);
                MPI_Recv(&queryRecv[0],9,MPI_LONG,src,tag,MPI_COMM_WORLD,&status);
                processReceivedQueryPathCompression(queryRecv,finished,replyRequired,replyToBeSent,unionfindDs,pointIdMapping,startIndex,processRank,processQueryNumMappingSend,queryNum,status);
            }
        }
    }
    (*finished)[processRank - 1] = true;
    vector<long int> finishedMsg = createNewMessagePathCompression(1,-1,-1,-1,-1,-1,-1,-1,-1);
    for(int j = 1; j < num_processes; j++)
    {
        if(j == processRank)
        {
            continue;
        }
        sendMessage(finishedMsg,j,processQueryNumMappingSend);
    }
    bool completed = true;
    while(true)
    {
        for(int j = 1; j < num_processes; j++)
        {
            if(!(*finished)[j - 1])
            {
                completed = false;
                break;
            }
        }
        if(!completed)
        {
            MPI_Iprobe(MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &flag, &status);
            if(flag)
            {
                flag = false;
                int src = status.MPI_SOURCE;
                int tag = status.MPI_TAG;
                vector<long int> queryRecv;
                queryRecv.resize(9);
                MPI_Recv(&queryRecv[0],9,MPI_LONG,src,tag,MPI_COMM_WORLD,&status);
                processReceivedQueryPathCompression(queryRecv,finished,replyRequired,replyToBeSent,unionfindDs,pointIdMapping,startIndex,processRank,processQueryNumMappingSend,queryNum,status);
            }
        }
        else
        {
            break;
        }
        completed = true;
    }
}


void processReceivedQueryPathCompression(vector<long int> queryRecv,vector<bool>* finished, map<vector<long int>, vector<long int> >* replyRequired,map<vector<long int>, int>* replyToBeSent,vector<long int>* unionfindDs,vector<int> pointIdMapping,long int startIndex, int processRank,map<int,int>* processQueryNumMappingSend,long int* queryNum,MPI_Status status)
{
    returnStruct* retVal;
    if(queryRecv[0] == 1) // means process that sent this message has finished its processing
    {
        (*finished)[status.MPI_SOURCE - 1] = true;
    }
    else if(queryRecv[7] > 0)
    {
        printf("Received reply for queryNumber %ld by process %d from process %d\n",queryRecv[7],processRank,status.MPI_SOURCE);
        vector<long int> queryReply;
        // (query number,oldQueryY)
        queryReply.push_back(queryRecv[7]);
        queryReply.push_back(queryRecv[3]);
        queryReply.push_back(queryRecv[4]);
        queryReply.resize(3);
        map<vector<long int>, vector<long int> >::iterator map_itr = (*replyRequired).find(queryReply);
        if(map_itr != (*replyRequired).end())
        {
            map<vector<long int>,int>::iterator map_itr2 = (*replyToBeSent).find(queryReply);
            if(map_itr2 != (*replyToBeSent).end())
            {
                // vector<long int> replyMsg = createNewMessagePathCompression(0,-1,queryRecv[2],queryRecv[3],queryRecv[4],-1,-1,queryRecv[7],queryRecv[8]);
                sendMessage(queryRecv,map_itr2->second,processQueryNumMappingSend);
                (*replyToBeSent).erase(map_itr2);           
            }
            doPathCompression((map_itr->second)[1],queryRecv[8],processRank,startIndex,pointIdMapping ,unionfindDs);
            (*replyRequired).erase(map_itr);
        }
    }
    else
    {
        retVal = unifyPathCompression(queryRecv[5],queryRecv[6],unionfindDs,pointIdMapping,startIndex,processRank);
        if(retVal->query->finalParent != -1)
        {
            printf("Union of %ld and %ld done by process %d\n",queryRecv[5],queryRecv[6],processRank);
            vector<long int> replyMsg = createNewMessagePathCompression(0,-1,queryRecv[2],queryRecv[3],queryRecv[4],-1,-1,queryRecv[1],retVal->query->finalParent);
            sendMessage(replyMsg,status.MPI_SOURCE,processQueryNumMappingSend);
        }
        else
        {
            vector<long int> queryforWhichReplyRequired;
            queryforWhichReplyRequired.push_back(queryRecv[1]);
            queryforWhichReplyRequired.push_back(queryRecv[3]);
            queryforWhichReplyRequired.push_back(queryRecv[4]);

            vector<long int> queryWithWhichProcessStarted;
            queryWithWhichProcessStarted.push_back(queryRecv[5]);
            queryWithWhichProcessStarted.push_back(queryRecv[6]);
            (*replyRequired)[queryforWhichReplyRequired] = queryWithWhichProcessStarted;

            (*replyToBeSent)[queryforWhichReplyRequired] = status.MPI_SOURCE;

            vector<long int> queryForward = createNewMessagePathCompression(0,queryRecv[1],queryRecv[2],queryRecv[3],queryRecv[4],retVal->query->newQueryX,retVal->query->newQueryY,-1,-1);
            sendMessage(queryForward,retVal->query->toProcess,processQueryNumMappingSend);
            printf("Sent query union(%ld,%ld)=>union(%ld,%ld) to process %d with tag %d\n",queryRecv[5],queryRecv[6],retVal->query->newQueryX,retVal->query->newQueryY,retVal->query->toProcess,(*processQueryNumMappingSend)[retVal->query->toProcess] - 1);
        }
    }
}



returnStruct* unifyPathCompression(long int x, long int y, vector<long int>* unionfindDs, vector<int> pointIdMapping, long int startIndex, int process_of_y)
{
    long int root_y = y;
    long int its_parent = (*unionfindDs)[root_y - startIndex];
    long int* final_parent = NULL;
    returnStruct* retVal = (returnStruct*)malloc(sizeof(returnStruct));
    retVal->query = NULL;
    while(root_y < its_parent && pointIdMapping[its_parent] == process_of_y)
    {
        root_y = its_parent;
        its_parent = (*unionfindDs)[root_y - startIndex];
    }

    if(root_y == its_parent)
    {
        if(root_y < x)
        {
            (*unionfindDs)[root_y - startIndex] = x;
            final_parent = (long int*)malloc(sizeof(long int));
            printf("set parent of %ld to %ld\n",root_y,x);
            *final_parent = x;
            retVal->query = createQueryFwd(-1,-1,-1,*final_parent); // rest values not needed
            retVal->unionDone = true;
        }
        else if(root_y == x)
        {
            final_parent = (long int*)malloc(sizeof(long int));
            *final_parent = x;
            retVal->query = createQueryFwd(-1,-1,-1,*final_parent);
            retVal->unionDone = false; // means the two points are in the same set
        }
        else
        {
            // forward message
            retVal->query = createQueryFwd(root_y,x,pointIdMapping[x],-1); // final parent is not yet set
        }
    }
    else
    {
        if(its_parent < x)
        {
            // forward message
            retVal->query = createQueryFwd(x,its_parent,pointIdMapping[its_parent],-1);
        }
        else
        {
            // forward message
            retVal->query = createQueryFwd(its_parent,x,pointIdMapping[x],-1);
        }
    }
    if(final_parent != NULL)
    {
        doPathCompression(y,*final_parent,process_of_y,startIndex,pointIdMapping,unionfindDs);
    }
    return retVal;
}

void doPathCompression(long int startNode,long int parent,int process_of_y,long int startIndex,vector<int> pointIdMapping ,vector<long int>* unionfindDs)
{
    long int node = startNode;
    while(node < parent && pointIdMapping[node] == process_of_y)
    {
        long int temp = (*unionfindDs)[node - startIndex];
        if((*unionfindDs)[node - startIndex] != parent)
        {
            (*unionfindDs)[node - startIndex] = parent;
            printf("updated parent of %ld to %ld in process %d\n",node,parent,process_of_y);
        }
        node = temp;
    }
}